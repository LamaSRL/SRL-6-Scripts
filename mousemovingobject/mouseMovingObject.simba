program MouseMovingObject;
{$DEFINE SMART}
{$I SRL-6/SRL.simba}

type
  TFinderObj = record
    ColorData: TColorData;
    OverText: TStringArray;
  end;

procedure TFinderObj.Init;
begin
  Self.ColorData := [2907463, 22, [2, [0.24, 0.34]]];
  Self.OverText  := ['ank', 'merald', 'enedict'];
end;

function TFinderObj.Visible: boolean;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
begin
  Self.ColorData.gatherIn(TPA, mainScreen.getBounds());

  if (length(TPA) >= 1) then
    begin
      ATPA := TPA.split(10);
      ATPA.filterBetween(0, 7);

      if (length(ATPA) >= 1) then
        exit(true);
    end;
end;

function TFinderObj.Find: TPoint;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  i: integer;
begin
  repeat
    Self.ColorData.gatherIn(TPA, mainScreen.getBounds());

    if (length(TPA) >= 1) then
      begin
        ATPA := TPA.split(10);
        ATPA.filterBetween(0, 7);
      end;
  until length(ATPA) >= 1;

  ATPA.sortFromMidPoint(mainScreen.playerPoint);

  result := middleTPA(ATPA[0]);
end;

function mMoving(xs, ys, gravity, wind, minwait, maxwait, targetArea: Extended; obj: TFinderObj): boolean;
var
  veloX, veloY, windX, windY, veloMag, dist, randomDist, D: extended;
  lastX, lastY, MSP, W, TDist: integer;
  ptTarget, ptLast: TPoint;
  T: LongWord;
  sqrt2, sqrt3, sqrt5, maxStep, rCnc: extended;
  iterated: boolean;
begin
  MSP  := mouseSpeed;
  sqrt2:= sqrt(2);
  sqrt3:= sqrt(3);
  sqrt5:= sqrt(5);

  ptTarget := obj.Find();
  ptLast := ptTarget;

  TDist := distance(round(xs), round(ys), ptTarget.X, ptTarget.Y);
  t := getSystemTime() + 10000;
  repeat                 // might leave viewfinder
    if (getSystemTime() > t or (not obj.Visible)) then
      break;

    ptTarget := obj.Find();

    if (ptTarget.X = -1) then
      exit;

    ptLast := ptTarget;

    dist := hypot(xs - ptTarget.x, ys - ptTarget.y);

    wind := minE(wind, dist);
    if (dist < 1) then
      dist := 1;

    D := (round((round(TDist)*0.3))/7);
    if (D > 25) then
      D := 25;
    if (D < 5) then
      D := 5;

    rCnc := random(6);
    if (rCnc = 1) then
      D := randomRange(2,3);

    if (D <= round(dist)) then
      maxStep := D
    else
      maxStep := round(dist);

    if dist >= targetArea then
    begin
      windX := windX / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
      windY := windY / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
    end else
    begin
      windX := windX / sqrt2;
      windY := windY / sqrt2;
    end;

    veloX := veloX + windX;
    veloY := veloY + windY;
    veloX := veloX + gravity * (ptTarget.x - xs) / dist;
    veloY := veloY + gravity * (ptTarget.y - ys) / dist;

    if (hypot(veloX, veloY) > maxStep) then
    begin
      randomDist := maxStep / 2.0 + random(round(maxStep) div 2);
      veloMag := sqrt(veloX * veloX + veloY * veloY);
      veloX := (veloX / veloMag) * randomDist;
      veloY := (veloY / veloMag) * randomDist;
    end;

    lastX := round(xs);
    lastY := round(ys);
    xs := xs + veloX;
    ys := ys + veloY;

    if (lastX <> round(xs)) or (lastY <> round(ys)) then
      moveMouse(round(xs), round(ys));

    W := (random((round(100/MSP)))*4);
    if (W < 4) then
      W := 4;
    W := round(W*0.9);

    wait(W);
  until(hypot(xs - ptTarget.X, ys - ptTarget.Y) < 3);

  if (hypot(xs - ptTarget.X, ys - ptTarget.Y) < 3) then
    exit(true);

  mouseSpeed := MSP;
end;

function mouseObject(obj: TFinderObj; button: integer): boolean;
var
  randSpeed: extended;
  x, y, ms: integer;
begin
  if (button = MOUSE_NONE) then
    exit;

  ms := mouseSpeed;
  randSpeed := ((random(mouseSpeed)) / 1.3 + mouseSpeed) / 6.25;
  getMousePos(x, y);

  if mMoving(x, y, MOUSE_HUMAN, 5, 12.0/randSpeed, 15.0/randSpeed, 8.5*randSpeed, obj) then
    begin
      fastClick(button);
      exit(true);
    end;

  mouseSpeed := ms;
end;

function TFinderObj.Click: boolean;
begin
  if not Self.Visible then
    exit; // do searching logic somewhere, for example

  // mouse the object, then click
  if (mouseObject(Self, MOUSE_MOVE)) then
    if (isMouseOverText(Self.OverText)) then
      exit(didClick(true));
end;

var
  banker: TFinderObj;
begin
  setupSRL();
  smartEnableDrawing := true;
  smartShowConsole := false;

  banker.Init();
  banker.Click();
end.
